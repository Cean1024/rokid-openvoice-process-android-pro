// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: speech.proto
#ifndef GRPC_speech_2eproto__INCLUDED
#define GRPC_speech_2eproto__INCLUDED

#include "speech.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace rokid {
namespace open {

class Speech GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::rokid::open::AsrRequest, ::rokid::open::AsrResponse>> asr(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::rokid::open::AsrRequest, ::rokid::open::AsrResponse>>(asrRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rokid::open::AsrRequest, ::rokid::open::AsrResponse>> Asyncasr(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rokid::open::AsrRequest, ::rokid::open::AsrResponse>>(AsyncasrRaw(context, cq, tag));
    }
    virtual ::grpc::Status nlp(::grpc::ClientContext* context, const ::rokid::open::NlpRequest& request, ::rokid::open::NlpResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rokid::open::NlpResponse>> Asyncnlp(::grpc::ClientContext* context, const ::rokid::open::NlpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rokid::open::NlpResponse>>(AsyncnlpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::rokid::open::TtsResponse>> tts(::grpc::ClientContext* context, const ::rokid::open::TtsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::rokid::open::TtsResponse>>(ttsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::rokid::open::TtsResponse>> Asynctts(::grpc::ClientContext* context, const ::rokid::open::TtsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::rokid::open::TtsResponse>>(AsyncttsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::rokid::open::VoiceSpeechRequest, ::rokid::open::VoiceSpeechResponse>> speechv(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::rokid::open::VoiceSpeechRequest, ::rokid::open::VoiceSpeechResponse>>(speechvRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rokid::open::VoiceSpeechRequest, ::rokid::open::VoiceSpeechResponse>> Asyncspeechv(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::rokid::open::VoiceSpeechRequest, ::rokid::open::VoiceSpeechResponse>>(AsyncspeechvRaw(context, cq, tag));
    }
    virtual ::grpc::Status speecht(::grpc::ClientContext* context, const ::rokid::open::TextSpeechRequest& request, ::rokid::open::TextSpeechResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rokid::open::TextSpeechResponse>> Asyncspeecht(::grpc::ClientContext* context, const ::rokid::open::TextSpeechRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rokid::open::TextSpeechResponse>>(AsyncspeechtRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::rokid::open::AsrRequest, ::rokid::open::AsrResponse>* asrRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::rokid::open::AsrRequest, ::rokid::open::AsrResponse>* AsyncasrRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rokid::open::NlpResponse>* AsyncnlpRaw(::grpc::ClientContext* context, const ::rokid::open::NlpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::rokid::open::TtsResponse>* ttsRaw(::grpc::ClientContext* context, const ::rokid::open::TtsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::rokid::open::TtsResponse>* AsyncttsRaw(::grpc::ClientContext* context, const ::rokid::open::TtsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::rokid::open::VoiceSpeechRequest, ::rokid::open::VoiceSpeechResponse>* speechvRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::rokid::open::VoiceSpeechRequest, ::rokid::open::VoiceSpeechResponse>* AsyncspeechvRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rokid::open::TextSpeechResponse>* AsyncspeechtRaw(::grpc::ClientContext* context, const ::rokid::open::TextSpeechRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReaderWriter< ::rokid::open::AsrRequest, ::rokid::open::AsrResponse>> asr(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::rokid::open::AsrRequest, ::rokid::open::AsrResponse>>(asrRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::rokid::open::AsrRequest, ::rokid::open::AsrResponse>> Asyncasr(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::rokid::open::AsrRequest, ::rokid::open::AsrResponse>>(AsyncasrRaw(context, cq, tag));
    }
    ::grpc::Status nlp(::grpc::ClientContext* context, const ::rokid::open::NlpRequest& request, ::rokid::open::NlpResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rokid::open::NlpResponse>> Asyncnlp(::grpc::ClientContext* context, const ::rokid::open::NlpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rokid::open::NlpResponse>>(AsyncnlpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::rokid::open::TtsResponse>> tts(::grpc::ClientContext* context, const ::rokid::open::TtsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::rokid::open::TtsResponse>>(ttsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::rokid::open::TtsResponse>> Asynctts(::grpc::ClientContext* context, const ::rokid::open::TtsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::rokid::open::TtsResponse>>(AsyncttsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::rokid::open::VoiceSpeechRequest, ::rokid::open::VoiceSpeechResponse>> speechv(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::rokid::open::VoiceSpeechRequest, ::rokid::open::VoiceSpeechResponse>>(speechvRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::rokid::open::VoiceSpeechRequest, ::rokid::open::VoiceSpeechResponse>> Asyncspeechv(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::rokid::open::VoiceSpeechRequest, ::rokid::open::VoiceSpeechResponse>>(AsyncspeechvRaw(context, cq, tag));
    }
    ::grpc::Status speecht(::grpc::ClientContext* context, const ::rokid::open::TextSpeechRequest& request, ::rokid::open::TextSpeechResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rokid::open::TextSpeechResponse>> Asyncspeecht(::grpc::ClientContext* context, const ::rokid::open::TextSpeechRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rokid::open::TextSpeechResponse>>(AsyncspeechtRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReaderWriter< ::rokid::open::AsrRequest, ::rokid::open::AsrResponse>* asrRaw(::grpc::ClientContext* context) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReaderWriter< ::rokid::open::AsrRequest, ::rokid::open::AsrResponse>* AsyncasrRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::rokid::open::NlpResponse>* AsyncnlpRaw(::grpc::ClientContext* context, const ::rokid::open::NlpRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientReader< ::rokid::open::TtsResponse>* ttsRaw(::grpc::ClientContext* context, const ::rokid::open::TtsRequest& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::rokid::open::TtsResponse>* AsyncttsRaw(::grpc::ClientContext* context, const ::rokid::open::TtsRequest& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientReaderWriter< ::rokid::open::VoiceSpeechRequest, ::rokid::open::VoiceSpeechResponse>* speechvRaw(::grpc::ClientContext* context) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReaderWriter< ::rokid::open::VoiceSpeechRequest, ::rokid::open::VoiceSpeechResponse>* AsyncspeechvRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::rokid::open::TextSpeechResponse>* AsyncspeechtRaw(::grpc::ClientContext* context, const ::rokid::open::TextSpeechRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_asr_;
    const ::grpc::RpcMethod rpcmethod_nlp_;
    const ::grpc::RpcMethod rpcmethod_tts_;
    const ::grpc::RpcMethod rpcmethod_speechv_;
    const ::grpc::RpcMethod rpcmethod_speecht_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status asr(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rokid::open::AsrResponse, ::rokid::open::AsrRequest>* stream);
    virtual ::grpc::Status nlp(::grpc::ServerContext* context, const ::rokid::open::NlpRequest* request, ::rokid::open::NlpResponse* response);
    virtual ::grpc::Status tts(::grpc::ServerContext* context, const ::rokid::open::TtsRequest* request, ::grpc::ServerWriter< ::rokid::open::TtsResponse>* writer);
    virtual ::grpc::Status speechv(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rokid::open::VoiceSpeechResponse, ::rokid::open::VoiceSpeechRequest>* stream);
    virtual ::grpc::Status speecht(::grpc::ServerContext* context, const ::rokid::open::TextSpeechRequest* request, ::rokid::open::TextSpeechResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_asr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_asr() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_asr() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status asr(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rokid::open::AsrResponse, ::rokid::open::AsrRequest>* stream) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestasr(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::rokid::open::AsrResponse, ::rokid::open::AsrRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nlp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_nlp() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_nlp() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nlp(::grpc::ServerContext* context, const ::rokid::open::NlpRequest* request, ::rokid::open::NlpResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnlp(::grpc::ServerContext* context, ::rokid::open::NlpRequest* request, ::grpc::ServerAsyncResponseWriter< ::rokid::open::NlpResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_tts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_tts() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_tts() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status tts(::grpc::ServerContext* context, const ::rokid::open::TtsRequest* request, ::grpc::ServerWriter< ::rokid::open::TtsResponse>* writer) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesttts(::grpc::ServerContext* context, ::rokid::open::TtsRequest* request, ::grpc::ServerAsyncWriter< ::rokid::open::TtsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_speechv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_speechv() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_speechv() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status speechv(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rokid::open::VoiceSpeechResponse, ::rokid::open::VoiceSpeechRequest>* stream) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestspeechv(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::rokid::open::VoiceSpeechResponse, ::rokid::open::VoiceSpeechRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_speecht : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_speecht() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_speecht() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status speecht(::grpc::ServerContext* context, const ::rokid::open::TextSpeechRequest* request, ::rokid::open::TextSpeechResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestspeecht(::grpc::ServerContext* context, ::rokid::open::TextSpeechRequest* request, ::grpc::ServerAsyncResponseWriter< ::rokid::open::TextSpeechResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_asr<WithAsyncMethod_nlp<WithAsyncMethod_tts<WithAsyncMethod_speechv<WithAsyncMethod_speecht<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_asr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_asr() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_asr() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status asr(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rokid::open::AsrResponse, ::rokid::open::AsrRequest>* stream) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nlp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_nlp() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_nlp() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nlp(::grpc::ServerContext* context, const ::rokid::open::NlpRequest* request, ::rokid::open::NlpResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_tts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_tts() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_tts() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status tts(::grpc::ServerContext* context, const ::rokid::open::TtsRequest* request, ::grpc::ServerWriter< ::rokid::open::TtsResponse>* writer) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_speechv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_speechv() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_speechv() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status speechv(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rokid::open::VoiceSpeechResponse, ::rokid::open::VoiceSpeechRequest>* stream) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_speecht : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_speecht() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_speecht() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status speecht(::grpc::ServerContext* context, const ::rokid::open::TextSpeechRequest* request, ::rokid::open::TextSpeechResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace open
}  // namespace rokid


#endif  // GRPC_speech_2eproto__INCLUDED
