// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: speech.proto

#include "speech.pb.h"
#include "speech.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace rokid {
namespace open {

static const char* Speech_method_names[] = {
  "/rokid.open.Speech/asr",
  "/rokid.open.Speech/nlp",
  "/rokid.open.Speech/tts",
  "/rokid.open.Speech/speechv",
  "/rokid.open.Speech/speecht",
};

std::unique_ptr< Speech::Stub> Speech::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Speech::Stub> stub(new Speech::Stub(channel));
  return stub;
}

Speech::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_asr_(Speech_method_names[0], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_nlp_(Speech_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_tts_(Speech_method_names[2], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_speechv_(Speech_method_names[3], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_speecht_(Speech_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::rokid::open::AsrRequest, ::rokid::open::AsrResponse>* Speech::Stub::asrRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::rokid::open::AsrRequest, ::rokid::open::AsrResponse>(channel_.get(), rpcmethod_asr_, context);
}

::grpc::ClientAsyncReaderWriter< ::rokid::open::AsrRequest, ::rokid::open::AsrResponse>* Speech::Stub::AsyncasrRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReaderWriter< ::rokid::open::AsrRequest, ::rokid::open::AsrResponse>(channel_.get(), cq, rpcmethod_asr_, context, tag);
}

::grpc::Status Speech::Stub::nlp(::grpc::ClientContext* context, const ::rokid::open::NlpRequest& request, ::rokid::open::NlpResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_nlp_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rokid::open::NlpResponse>* Speech::Stub::AsyncnlpRaw(::grpc::ClientContext* context, const ::rokid::open::NlpRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::rokid::open::NlpResponse>(channel_.get(), cq, rpcmethod_nlp_, context, request);
}

::grpc::ClientReader< ::rokid::open::TtsResponse>* Speech::Stub::ttsRaw(::grpc::ClientContext* context, const ::rokid::open::TtsRequest& request) {
  return new ::grpc::ClientReader< ::rokid::open::TtsResponse>(channel_.get(), rpcmethod_tts_, context, request);
}

::grpc::ClientAsyncReader< ::rokid::open::TtsResponse>* Speech::Stub::AsyncttsRaw(::grpc::ClientContext* context, const ::rokid::open::TtsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::rokid::open::TtsResponse>(channel_.get(), cq, rpcmethod_tts_, context, request, tag);
}

::grpc::ClientReaderWriter< ::rokid::open::VoiceSpeechRequest, ::rokid::open::VoiceSpeechResponse>* Speech::Stub::speechvRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::rokid::open::VoiceSpeechRequest, ::rokid::open::VoiceSpeechResponse>(channel_.get(), rpcmethod_speechv_, context);
}

::grpc::ClientAsyncReaderWriter< ::rokid::open::VoiceSpeechRequest, ::rokid::open::VoiceSpeechResponse>* Speech::Stub::AsyncspeechvRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReaderWriter< ::rokid::open::VoiceSpeechRequest, ::rokid::open::VoiceSpeechResponse>(channel_.get(), cq, rpcmethod_speechv_, context, tag);
}

::grpc::Status Speech::Stub::speecht(::grpc::ClientContext* context, const ::rokid::open::TextSpeechRequest& request, ::rokid::open::TextSpeechResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_speecht_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rokid::open::TextSpeechResponse>* Speech::Stub::AsyncspeechtRaw(::grpc::ClientContext* context, const ::rokid::open::TextSpeechRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::rokid::open::TextSpeechResponse>(channel_.get(), cq, rpcmethod_speecht_, context, request);
}

Speech::Service::Service() {
  (void)Speech_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      Speech_method_names[0],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< Speech::Service, ::rokid::open::AsrRequest, ::rokid::open::AsrResponse>(
          std::mem_fn(&Speech::Service::asr), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Speech_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Speech::Service, ::rokid::open::NlpRequest, ::rokid::open::NlpResponse>(
          std::mem_fn(&Speech::Service::nlp), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Speech_method_names[2],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< Speech::Service, ::rokid::open::TtsRequest, ::rokid::open::TtsResponse>(
          std::mem_fn(&Speech::Service::tts), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Speech_method_names[3],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< Speech::Service, ::rokid::open::VoiceSpeechRequest, ::rokid::open::VoiceSpeechResponse>(
          std::mem_fn(&Speech::Service::speechv), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Speech_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Speech::Service, ::rokid::open::TextSpeechRequest, ::rokid::open::TextSpeechResponse>(
          std::mem_fn(&Speech::Service::speecht), this)));
}

Speech::Service::~Service() {
}

::grpc::Status Speech::Service::asr(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rokid::open::AsrResponse, ::rokid::open::AsrRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Speech::Service::nlp(::grpc::ServerContext* context, const ::rokid::open::NlpRequest* request, ::rokid::open::NlpResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Speech::Service::tts(::grpc::ServerContext* context, const ::rokid::open::TtsRequest* request, ::grpc::ServerWriter< ::rokid::open::TtsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Speech::Service::speechv(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rokid::open::VoiceSpeechResponse, ::rokid::open::VoiceSpeechRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Speech::Service::speecht(::grpc::ServerContext* context, const ::rokid::open::TextSpeechRequest* request, ::rokid::open::TextSpeechResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rokid
}  // namespace open

